port	3306
rootpwd	root
-- 테이블 삭제
DROP TABLE IF EXISTS tbl_payment_order CASCADE;
DROP TABLE IF EXISTS tbl_payment CASCADE;
DROP TABLE IF EXISTS tbl_order_menu CASCADE;
DROP TABLE IF EXISTS tbl_order CASCADE;
DROP TABLE IF EXISTS tbl_menu CASCADE;
DROP TABLE IF EXISTS tbl_category CASCADE;

-- 테이블 생성
-- category 테이블 생성
CREATE TABLE IF NOT EXISTS tbl_category
(
    category_code    INT AUTO_INCREMENT COMMENT '카테고리코드',
    category_name    VARCHAR(30) NOT NULL COMMENT '카테고리명',
    ref_category_code    INT COMMENT '상위카테고리코드',
    CONSTRAINT pk_category_code PRIMARY KEY (category_code),
    CONSTRAINT fk_ref_category_code FOREIGN KEY (ref_category_code) REFERENCES tbl_category (category_code)
) ENGINE=INNODB COMMENT '카테고리';

CREATE TABLE IF NOT EXISTS tbl_menu
(
    menu_code    INT AUTO_INCREMENT COMMENT '메뉴코드',
    menu_name    VARCHAR(30) NOT NULL COMMENT '메뉴명',
    menu_price    INT NOT NULL COMMENT '메뉴가격',
    category_code    INT NOT NULL COMMENT '카테고리코드',
    orderable_status    CHAR(1) NOT NULL COMMENT '주문가능상태',
    CONSTRAINT pk_menu_code PRIMARY KEY (menu_code),
    CONSTRAINT fk_category_code FOREIGN KEY (category_code) REFERENCES tbl_category (category_code)
) ENGINE=INNODB COMMENT '메뉴';


CREATE TABLE IF NOT EXISTS tbl_order
(
    order_code    INT AUTO_INCREMENT COMMENT '주문코드',
    order_date    VARCHAR(8) NOT NULL COMMENT '주문일자',
    order_time    VARCHAR(8) NOT NULL COMMENT '주문시간',
    total_order_price    INT NOT NULL COMMENT '총주문금액',
    CONSTRAINT pk_order_code PRIMARY KEY (order_code)
) ENGINE=INNODB COMMENT '주문';


CREATE TABLE IF NOT EXISTS tbl_order_menu
(
    order_code INT NOT NULL COMMENT '주문코드',
    menu_code    INT NOT NULL COMMENT '메뉴코드',
    order_amount    INT NOT NULL COMMENT '주문수량',
    CONSTRAINT pk_comp_order_menu_code PRIMARY KEY (order_code, menu_code),
    CONSTRAINT fk_order_menu_order_code FOREIGN KEY (order_code) REFERENCES tbl_order (order_code),
    CONSTRAINT fk_order_menu_menu_code FOREIGN KEY (menu_code) REFERENCES tbl_menu (menu_code)
) ENGINE=INNODB COMMENT '주문별메뉴';


CREATE TABLE IF NOT EXISTS tbl_payment
(
    payment_code    INT AUTO_INCREMENT COMMENT '결제코드',
    payment_date    VARCHAR(8) NOT NULL COMMENT '결제일',
    payment_time    VARCHAR(8) NOT NULL COMMENT '결제시간',
    payment_price    INT NOT NULL COMMENT '결제금액',
    payment_type    VARCHAR(6) NOT NULL COMMENT '결제구분',
    CONSTRAINT pk_payment_code PRIMARY KEY (payment_code)
) ENGINE=INNODB COMMENT '결제';


CREATE TABLE IF NOT EXISTS tbl_payment_order
(
    order_code    INT NOT NULL COMMENT '주문코드',
    payment_code    INT NOT NULL COMMENT '결제코드',
    CONSTRAINT pk_comp_payment_order_code PRIMARY KEY (payment_code, order_code),
    CONSTRAINT fk_payment_order_order_code FOREIGN KEY (order_code) REFERENCES tbl_order (order_code),
    CONSTRAINT fk_payment_order_payment_code FOREIGN KEY (order_code) REFERENCES tbl_payment (payment_code)
) ENGINE=INNODB COMMENT '결제별주문';

-- 데이터 삽입
INSERT INTO tbl_category VALUES (null, '식사', null);
INSERT INTO tbl_category VALUES (null, '음료', null);
INSERT INTO tbl_category VALUES (null, '디저트', null);
INSERT INTO tbl_category VALUES (null, '한식', 1);
INSERT INTO tbl_category VALUES (null, '중식', 1);

INSERT INTO tbl_category VALUES (null, '일식', 1);
INSERT INTO tbl_category VALUES (null, '퓨전', 1);
INSERT INTO tbl_category VALUES (null, '커피', 2);
INSERT INTO tbl_category VALUES (null, '쥬스', 2);
INSERT INTO tbl_category VALUES (null, '기타', 2);

INSERT INTO tbl_category VALUES (null, '동양', 3);
INSERT INTO tbl_category VALUES (null, '서양', 3);

INSERT INTO tbl_menu VALUES (null, '열무김치라떼', 4500, 8, 'Y');
INSERT INTO tbl_menu VALUES (null, '우럭스무디', 5000, 10, 'Y');
INSERT INTO tbl_menu VALUES (null, '생갈치쉐이크', 6000, 10, 'Y');
INSERT INTO tbl_menu VALUES (null, '갈릭미역파르페', 7000, 10, 'Y');
INSERT INTO tbl_menu VALUES (null, '앙버터김치찜', 13000, 4, 'N');

INSERT INTO tbl_menu VALUES (null, '생마늘샐러드', 12000, 4, 'Y');
INSERT INTO tbl_menu VALUES (null, '민트미역국', 15000, 4, 'Y');
INSERT INTO tbl_menu VALUES (null, '한우딸기국밥', 20000, 4, 'Y');
INSERT INTO tbl_menu VALUES (null, '홍어마카롱', 9000, 12, 'Y');
INSERT INTO tbl_menu VALUES (null, '코다리마늘빵', 7000, 12, 'N');

INSERT INTO tbl_menu VALUES (null, '정어리빙수', 10000, 10, 'Y');
INSERT INTO tbl_menu VALUES (null, '날치알스크류바', 2000, 10, 'Y');
INSERT INTO tbl_menu VALUES (null, '직화구이젤라또', 8000, 12, 'Y');
INSERT INTO tbl_menu VALUES (null, '과메기커틀릿', 13000, 6, 'Y');
INSERT INTO tbl_menu VALUES (null, '죽방멸치튀김우동', 11000, 6, 'N');

INSERT INTO tbl_menu VALUES (null, '흑마늘아메리카노', 9000, 8, 'Y');
INSERT INTO tbl_menu VALUES (null, '아이스가리비관자육수', 6000, 10, 'Y');
INSERT INTO tbl_menu VALUES (null, '붕어빵초밥', 35000, 6, 'Y');
INSERT INTO tbl_menu VALUES (null, '까나리코코넛쥬스', 9000, 9, 'Y');
INSERT INTO tbl_menu VALUES (null, '마라깐쇼한라봉', 22000, 5, 'N');

INSERT INTO tbl_menu VALUES (null, '돌미나리백설기', 5000, 11, 'Y');

COMMIT;
















select
category_code
from tbl_menu
where menu_name= '민트미역국';


select
menu_code,
menu_name,
menu_price,
category_code,
orderable_status
from tbl_menu
where category_code = (select
			category_code
			from tbl_menu
			where menu_name="우럭스무디");








select
 max(count)
from(select count(*) as 'Count' 
from tbl_menu 
group by category_code) as CountMenu;



-- 카테고리별 평균 가격보다 높은 가격의 메뉴 조회

select
*
from tbl_menu as a
where menu_price > (
SELECT AVG(MENU_PRICE) 
FROM tbl_menu 
where category_code = a.category_code);


select
category_name
from tbl_category as a
where exists (
	select
	1
	from tbl_menu b
	where b.category_code = a.category_code);



/* dml(data manipulation language) */

insert,update,delete,select(dql)
데이터 조작언어 테이블에 값을 
삽입하거나 수정하거나 삭제하거나
조회하는 언어

insert	
새로운 행을 추가하는 구문이다.
테이블의 행의 수가 증가한다.
insert into tbl_menu values(null, '바나나해장국',8500,4,'Y');

insert into tbl_menu
(
menu_name, orderable_status, category_code, menu_price
)
values
(
'빽사이즈 아메리카노', 'y',7,6000
);

깊은 산속옹달샘 누가와서 처먹니
세수 할어 왓다가 회만 뜨고 가지요
새벽에 토끼가 눈비비고 일어나
우카차카 

insert into tbl_menu values(null, '바나나해장국',8500,4,'Y');
insert into tbl_menu
	values(null, '해장국',8500,4,'Y'),
	         (null, '뼈다귀 해장국',8500,4,'Y'),
   	         (null, '왕뚝배기 해장국',8500,4,'Y');


update
--테이블에 기록된 컬럼의 값을 수정하는 구문이다.
   테이블의 전체 행 갯수는 변화가 없다.
select
menu_code,
category_code
from tbl_menu
where menu_name="바나나 해장국";

update tbl_menu
	set menu_name = "바나나 탕후루"
where menu_code = 22;

select * from tbl_menu;



delete from tbl_menu
order by menu_price desc
limit 2;

select * from tbl_menu
order by menu_price desc
limit 2;


delete from tbl_menu
where menu_price=8500;


replace
insert 시 primary key 또는 unique key 가 충돌이 발생할 수 있다면
replace 를 통해 중복된 데이터를 덮어 슬 수 있다.
replace into tbl_menu VALUES (12, '참기름 라떼', 5000,10,'Y');
insert into tbl_menu VALUES   (12, '참기름 라떼',5000,10,'Y');


Transaction
mysql은 기본적으로 commit 이 자동으로 되므로 수동으로 조절하고 싶다면 autocommit 설정을 변경 해야 한다.

set autocommit = 1;

set autocommit = on;



set autocommit = 0 ;
set autocommit = off;

--트렌젝션의 시작을 알림
start transaction;
select * from tbl_menu;
INSERT INTO tbl_menu VALUES (null, '바나나해장국', 8500, 4, 'Y');
UPDATE tbl_menu SET menu_name = '수정된 메뉴' WHERE menu_code = 5;
DELETE FROM tbl_menu WHERE menu_code = 7;

ddl
data definition language 


create table if not exists tb1(
pk int primary key,
fk int,
coll varchar(255),
check(coll in('Y','N'))
)engine=innodb;

describe tb1;

insert into tb1 values(2, 10, 'n');

alter
테이블에 추가/변경/수정 삭제하는 모든 것을 alter 명령어를 사용해 적용한다.
종류가 너무 많고 복잡하기 때문에 대표적인 것만 사용해 볼 것이다.

--컬럼을 추가하는경우
alter table tb1
-- not null 제약조건으로 인해 null을 포함할 수 없다.
add co12 int not null;
insert into tb1 values(2, 10, 'n');
--  column을 삭제하는 경우
alter table tb1
drop column co12;

alter table tb1
change column fk change_fk int not null;


create table if not exists tb3(
pk int primary key auto_increment,
fk int,
coll varchar(255),
check(coll in('Y','N'))
)engine=innodb;

insert into tb3 values(null, 10, 'N');
insert into tb3 values(null, 10, 'N');
insert into tb3 values(null, 10, 'N');
insert into tb3 values(null, 10, 'N');


trunate


constraints
--수업 목표 : 제약조건을 이해한다
제약조건

drop table if exists user_notnull,
create table if not exists user,notnull(
use




drop table if exists user_check;
create table if not exists user_check(
	user_no int auto_increment primary key,
	user_name carchar(255) not null,
	gender char(3) check(gender in ('남', '여')),
	age int check(age>=15)
)engine=innodb;

insert into user_check
values
(null, '홍길동', '남', 15),
(null, '김길동', '짭', 20),
(null, '신장구', '남', 5);



default
drop table if exists tb1_country;

Create table if not exists tbl_country(
	country_code int auto_increment primary key,
	oountry_name varchar(255) default '한국',
	poplation varchar(255) default '0명',
	add_day date default (current_date),
add_time datetime Default (current_time)
)engine = innodb;

insert into tbl_country
(country_code)
values(null);
values (null, default, default, default, default);

select * from tbl_country;

명

SELECT AVG(menu_price) FROM tbl_menu;
SELECT CAST(AVG(menu_price) AS SIGNED INTEGER) AS '평균 메뉴 가격' FROM tbl_menu;
SELECT CONVERT(AVG(menu_price), SIGNED INTEGER) AS '평균 메뉴 가격' FROM tbl_menu;

SELECT CAST('2023$5$30' AS DATE);
SELECT CAST('2023/5/30' AS DATE);
SELECT CAST('2023%5%30' AS DATE);
SELECT CAST('2023@5@30' AS DATE);

-- 카테고리별 메뉴 가격 합계 구하기
SELECT CONCAT(CAST(menu_price AS CHAR(5)), '원') FROM tbl_menu;

-- 카테고리별 메뉴 가격 합계 구하기
SELECT category_code, CONCAT(CAST(SUM(menu_price) AS CHAR(10)), '원') FROM tbl_menu GROUP BY category_code;

/* 암시적 형변환(Implicit Conversion) */
SELECT '1' + '2';    -- 각 문자가 정수로 변환됨
SELECT CONCAT(menu_price, '원') FROM tbl_menu;    -- menu_price가 문자로 변환됨
SELECT 3 > 'MAY';    -- 문자는 0으로 변환된다.
SELECT 5 > '6MAY';   -- 문자에서 첫번째로 나온 숫자는 정수로 전환된다.
SELECT 5 > 'M6AY';   -- 숫자가 뒤에 나오면 문자로 인식되어 0으로 변환된다.
SELECT '2023-5-30';  -- 날짜형으로 바뀔 수 있는 문자는 DATE형으로 변환된다.




select * from tbl_menu;


Create View hansik2 as 
Select
 menu_code,
 menu_name,
 menu_price,
 category_code,
 orderable_status
from tbl_menu
where category_code = 4;

select * from hansik;

insert into tbl_menu values(null, '식혜맛국밥', 5500, 4, 'y');

insert into hansik2 values(99, '수정과맛국밥', 5500, 4, 'y');
insert into hansik2 values(100, '수정과맛국밥', 5500, 5, 'y');

select * from tbl_menu;
select * from hansik2;




---------
CREATE VIEW HANSIK3 AS
SELECT

 menu.menu_name,
 menu.menu_price,
 category.category_code,
 
from tbl_menu menu
join tbl_category category on menu.category_code = category.category_code;

CREATE VIEW HANSIK3 AS
SELECT
    menu.menu_name,
    menu.menu_price,
    category.category_code
FROM tbl_menu menu
JOIN tbl_category category ON menu.category_code = category.category_code;



-- join 으로 설정된 테이블의 경우 view의 값을 변경하는 것은 불가능
view 를 통합 update

update hansik2
	 set menu_name = '토깽스 구이',
	 menu_price = 5700
where menu_code = 99;


delete from hansik where menu_code = 99;

뷰 삭제
drop view hansik2;




-view 에 쓰인 subquery 안에 연산 결과 컬럼도 사용 가능하다.

Create VIEW hansik7 as
Select
	menu_name as '메뉴명',
	truncate(menu_price/1000,1)AS '가격(천원)',
	category_name as '카테고리명'
from tbl_menu a
join tbl_category b on a.category_Code = b.category_code
where b.category_name = '한식';

select * from hansik7 where 메뉴명 like '%수정%'

- or replace 옵션
테이블을 drop 하지 않고 기존의 view 를 새로운 view 로 쉽게 대체할 수 있다.

Create or Replace view hansik7 as 
select
	menu_code '메뉴 코드',
	menu_name ' 메뉴명' ,	
	category_name  '카테고리명'
from tbl_menu a
join tbl_category b on a.category_Code = b.category_code;

